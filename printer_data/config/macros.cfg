#  __  __                          
# |  \/  |                         
# | \  / | __ _  ___ _ __ ___  ___ 
# | |\/| |/ _` |/ __| '__/ _ \/ __|
# | |  | | (_| | (__| | | (_) \__ \
# |_|  |_|\__,_|\___|_|  \___/|___/
#
# Macros Configurations - Flsun V400
# Version 3.0
#
# Guislain Cyril


##################################################
# Start and End G-Codes
##################################################

[gcode_macro PRINT_START]
description: Start G-Code
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set x_wait = 0 | float %}
  {% set y_wait = 0 | float %}

  # Homes the printer, sets absolute positioning and updates the SB leds.
  FLSUN_LOGO_ON                                                                     # Sets logo lighing on
  CASE_LIGHT_ON                                                                     # Sets case lighing on
  G28                                                                               # Full home (XYZ)
  G90                                                                               # Absolut position

  ##  Filament Sensor
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                               # Disable filament sensor
  
  ##  Bed Mesh Clear
  BED_MESH_CLEAR                                                                    # Clears old saved bed mesh

  # Checks if the bed temp is higher than 90c - if so then trigger a heat soak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                       # Displays info
    M106 S205                                                                       # Turns on part fan to 80%
    G1 X{x_wait} Y{y_wait} Z15 F3000                                                # Goes to center of the bed
    M190 S{target_bed}                                                              # Sets the target temp for the bed

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                       # Displays info
    G1 X{x_wait} Y{y_wait} Z15 F3000                                                # Goes to center of the bed
    M190 S{target_bed}                                                              # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                                            # Displays info
    G4 P300000                                                                      # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                                               # Displays info
  M109 S150                                                                         # Heats the nozzle to 150c

  ##  Bed Mesh Create
  #SET_DISPLAY_TEXT MSG="Bed mesh"                                                   # Displays info
  #BED_MESH_CALIBRATE ADAPTIVE=1                                                     # Starts bed mesh
  BED_MESH_PROFILE LOAD=default

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c  Hotend: {target_extruder}c"             # Displays info
  SMART_PARK                                                                        # Move for adaptive purge 
  M107                                                                              # Turns off partcooling fan
  M190 S{target_bed}                                                                # Sets the target temp for the bed
  M109 S{target_extruder}                                                           # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"                                           # Displays info
  SMART_PURGE                                                                       # Runs macro for purging
  G90                                                                               # Absolut position

  ##  Filament Sensor
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                               # Enables filament sensor


#####################################################################
#   Print End Macro
#####################################################################

[gcode_macro PRINT_END]
description: End G-Code
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                                                                          # wait for buffer to clear
    G92 E0                                                                        # zero the extruder
    G1 E-10.0 F3600                                                               # retract filament
    
    M106 S0                                                                       # turn off fan
    M104 S0                                                                       # turn off hotend
    M140 S0                                                                       # turn off bed

    G90                                                                           # absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                       # move nozzle to remove stringing
    G28                                                                           # park nozzle at home
        
    BED_MESH_CLEAR                                                                # Clears bed mesh

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                           # Disables filament sensor

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    
    FLSUN_LOGO_OFF                                                               # sets logo lighing off
    CASE_LIGHT_OFF                                                               # sets case lighing off
    SET_VELOCITY_LIMIT VELOCITY=300 ACCEL=3000                                   # reset speeds to default
    M84                                                                          # turns steppers off
    

##################################################
# Pause / Resume / Cancel Print
##################################################

[gcode_macro PAUSE]
description: Pause the current print
rename_existing: PAUSE_BASE
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-140) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  RESPOND MSG="Pausing printing..."
  PAUSE_BASE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500


[gcode_macro RESUME]
description: Resume the current print
rename_existing: RESUME_BASE
gcode:
  ##### set defaults #####
  {% set e = params.E|default(1) %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
  {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  G91
  {% if printer["gcode_macro M600"].m600_enabled == 1 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{printer["gcode_macro M600"].hotend_temp}
  M106 S{printer["gcode_macro M600"].fan_speed}
  RESPOND MSG="Loading filament..."
  G0 E50 F800
  G0 E30 F300
  M400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=0
  {% else %}
  G1 E{e} F2100
  {% endif %}
  RESPOND MSG="Resuming printing..."
  SET_IDLE_TIMEOUT TIMEOUT=1800
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the current print
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="Printing canceled!"
  G28
  M106 S0
  M104 S0
  M140 S0
  CANCEL_PRINT_BASE


#####################################################################
#   Print Adaptive Purging Macro
#####################################################################

[gcode_macro SMART_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_display_parameters: False  # Display macro paramters in the console.
variable_z_height: 0.8              # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 10           # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_amount: 30           # Amount of filament to purge
variable_flow_rate: 12              # Flow rate of purge in mm3/s. Default is 12.
variable_x_default: -100            # X location to purge, overwritten if adaptive is True
variable_y_default: -100            # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_purge_margin: 20           # Distance the purge will be in front of the print area, default is 20.

gcode:
  {% if display_parameters == True %}
     { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
     { action_respond_info("z_height        : %f" % (z_height))  }
     { action_respond_info("tip_distance    : %f" % (tip_distance))  }
     { action_respond_info("purge_amount    : %f" % (purge_amount))  }
     { action_respond_info("flow_rate       : %f" % (flow_rate))  }
     { action_respond_info("x_default       : %f" % (x_default))  }
     { action_respond_info("y_default       : %f" % (y_default))  }
     { action_respond_info("size            : %f" % (size))  }
     { action_respond_info("purge_margin    : %f" % (purge_margin))  }
  {% endif %}

  {% if adaptive_enable == True %}
     {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}     # Get all object points
     {% set purge_x_min = (all_points | map(attribute=0) | min | default(x_default)) %}                   # Object x min
     {% set purge_y_min = (all_points | map(attribute=1) | min | default(y_default)) %}                   # Object y min
     {% set purge_x_origin = ([purge_x_min - purge_margin, x_default] | max) %}                           # Add margin to x min, compare to x_default, and choose the larger
     {% set purge_y_origin = ([purge_y_min - purge_margin, y_default] | max) %}                           # Add margin to y min, compare to y_default, and choose the larger
  {% else %}
     {% set purge_x_origin = x_default | float %}
     {% set purge_y_origin = y_default | float %}
  {% endif %}
  
  {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
  {% set prepurge_speed = flow_rate / 2.405 %}
  {% set travel_speed = printer.toolhead.max_velocity %}
  { action_respond_info( "x: " + purge_x_origin|string + " y: " + purge_y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

  SAVE_GCODE_STATE NAME=Prepurge_State                                                                   # Create gcode state

  G92 E0                                                                                                 # Reset extruder
  G0 F{travel_speed}                                                                                     # Set travel speed
  G90                                                                                                    # Absolute positioning
  G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                                          # Move to purge position
  G0 Z{z_height}                                                                                         # Move to purge Z height
  M83                                                                                                    # Relative extrusion mode
  G1 E{tip_distance} F{prepurge_speed*60}                                                                # Move tip of filament to nozzle
  G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed*60}        # Purge first line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G0 Z{z_height*2}                                                                                       # Z hop
  G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}                                                 # Move to second purge line origin
  G0 Z{z_height}                                                                                         # Move to purge Z height
  G1 E.5 F2100                                                                                           # Recover
  G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed*60}             # Purge second line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G0 Z{z_height*2}                                                                                       # Z hop
  G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}                                                      # Move to third purge line origin
  G0 Z{z_height}                                                                                         # Move to purge Z height
  G1 E.5 F2100                                                                                           # Recover
  G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}           # Purge third line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G92 E0                                                                                                 # Reset extruder distance
  M82                                                                                                    # Absolute extrusion mode
  G0 Z{z_height*2}                                                                                       # Z hop

  RESTORE_GCODE_STATE NAME=Prepurge_State                                                                # Restore gcode state

  
#####################################################################
#  Parking Macros 
#####################################################################

# Smart park for adaptive purge
[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 15               # Z position for Smart Park, default is 10.
variable_x_default: -100            # X location to purge, overwritten if adaptive is True
variable_y_default: -100            # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_purge_margin: 20           # Distance the purge will be in front of the print area, default is 20.


gcode:
  {% if adaptive_enable == True %}
     {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}     # Get all object points
     {% set purge_x_min = (all_points | map(attribute=0) | min | default(x_default)) %}                   # Object x min
     {% set purge_y_min = (all_points | map(attribute=1) | min | default(y_default)) %}                   # Object y min
     {% set purge_x_origin = ([purge_x_min - purge_margin, x_default] | max) %}                           # Add margin to x min, compare to x_default, and choose the larger
     {% set purge_y_origin = ([purge_y_min - purge_margin, y_default] | max) %}                           # Add margin to y min, compare to y_default, and choose the larger
  {% else %}
     {% set purge_x_origin = x_default | float %}
     {% set purge_y_origin = y_default | float %}
  {% endif %}
  
     {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                               # Set travel speed from config
     { action_respond_info( "x: " + purge_x_origin|string + " y: " + purge_y_origin|string ) }

  SAVE_GCODE_STATE NAME=Presmart_Park_State                                                              # Create gcode state

  G0 F{travel_speed}                                                                                     # Set travel speed
  G90                                                                                                    # Absolute positioning
  G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                                          # Move to purge position
  G0 Z{z_height}                                                                                         # Move to purge Z height

  RESTORE_GCODE_STATE NAME=Presmart_Park_State                                                           # Restore gcode state


##################################################
# Filament / Color Change
##################################################

[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
variable_fan_speed: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-140) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=fan_speed VALUE={printer.fan.speed}
  RESPOND MSG="Pausing printing..."
  PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-10 F300
  G0 E-30 F800
  M400
  RESPOND MSG="Nozzle heating stopped!"
  M104 S0
  M106 S0
  RESTORE_GCODE_STATE NAME=M600_state


##################################################
# Load / Unload Filament
##################################################

[gcode_macro UNLOAD_FILAMENT]
description: Filament unloading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default (220) | float %}
  M109 S{EXTRUDER_TEMP}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 220 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{EXTRUDER_TEMP}
  {% endif %}
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-20 F300
  G0 E-50 F800
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Filament loading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default (220) | float %}
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 220 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{EXTRUDER_TEMP}
  {% endif %}
  RESPOND MSG="Loading filament..."
  G91
  G0 E50 F800
  G0 E20 F300
  M400
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


##################################################
# Calibrations
##################################################

[gcode_macro Z_OFFSET_CALIBRATION]
description: Measure Z-Offset
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  G1 X0 Y-21.5 Z30 F2500
  M400
  BEACON_AUTO_CALIBRATE


[gcode_macro ENDSTOPS_CALIBRATION]
description: Endstops Phase Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  G28
  G91
  G0 Z-80 F1500
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
  M400
  G28
  {% endif %}


[gcode_macro DELTA_CALIBRATION]
description: Delta Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_GCODE_OFFSET Z=0
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  DELTA_CALIBRATE
  M400
  G1 X0 Y0 Z30 F2500
  G28
  {% endif %}


[gcode_macro BED_MESH_CALIBRATION]
description: Bed Mesh Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_GCODE_OFFSET Z=0
  G28
  G1 X0 Y-21.5 Z50 F2500
  M400
  BED_MESH_CALIBRATE
  M400
  G1 X0 Y0 Z30 F2500
  G28
  {% endif %}


##################################################
# Nozzle / Bed PID Calibration
##################################################

[gcode_macro PID_BED]
description: Bed PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Bed PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(70)}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28
  {% endif %}


[gcode_macro PID_HOTEND]
description: Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Hotend PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(250)}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28
  {% endif %}
  
  
[gcode_macro _PID_KS_START]
description: PID for KlipperScreen
gcode:
  RESPOND MSG="PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106


[gcode_macro _PID_KS_END]
description: PID for KlipperScreen
gcode:
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  G28


##################################################
# Verifications and Measurements with ADXL
##################################################

[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE


[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  TEST_RESONANCES AXIS=X


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  TEST_RESONANCES AXIS=Y


##################################################
# Save Configuration
##################################################

[gcode_macro SAVE_CONFIGURATION]
description: Save Configuration
gcode:
  SAVE_CONFIG


##################################################
# Loading default bed mesh at startup
##################################################

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default


##################################################
# Z-Offset Management
##################################################

[gcode_macro SET_GCODE_OFFSET]
description: Saving Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% else %}
  {% set offsets = {'z': None} %}
  {% endif %}
  {% set ns = namespace(offsets={'z': offsets.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
  {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
  {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Loaded Z-Offset from variables.cfg file: %s" % (offsets)) }
  {% endif %}
